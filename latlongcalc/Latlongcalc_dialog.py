# -*- coding: utf-8 -*-
"""
/***************************************************************************
 LatlongcalcDialog
                                 A QGIS plugin
 DMStoDD
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-02-21
        git sha              : $Format:%H$
        copyright            : (C) 2023 by MCC
        email                : gis.williamasimone@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'Latlongcalc_dialog_base.ui'))


class LatlongcalcDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(LatlongcalcDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        self.spinBoxLatD.valueChanged.connect(self.latDMStoDD)
        self.spinBoxLatM.valueChanged.connect(self.latDMStoDD)
        self.spinBoxLatS.valueChanged.connect(self.latDMStoDD)
        self.latDir.currentTextChanged.connect(self.latDMStoDD)


        self.spinBoxLonD.valueChanged.connect(self.lngDMStoDD)
        self.spinBoxLonM.valueChanged.connect(self.lngDMStoDD)
        self.spinBoxLonS.valueChanged.connect(self.lngDMStoDD)
        self.lonDir.currentTextChanged.connect(self.lngDMStoDD)

        self.spinBoxLatDD.editingFinished.connect(self.latDDtoDMS)
        self.spinBoxLonDD.editingFinished.connect(self.lngDDtoDMS)



    def latDMStoDD(self):
        iDeg=self.spinBoxLatD.value()
        iMin=self.spinBoxLatM.value()
        dSec=self.spinBoxLatS.value()
        sHem=self.latDir.currentText()

        dDD=float(iDeg) + iMin/60 + dSec/3600
        if sHem == "S":
            dDD=dDD *-1

        self.spinBoxLatDD.setValue(dDD)


    def lngDMStoDD(self):
        iDeg=self.spinBoxLonD.value()
        iMin=self.spinBoxLonM.value()
        dSec=self.spinBoxLonS.value()
        sHem=self.lonDir.currentText()

        dDD=float(iDeg) + iMin/60 + dSec/3600
        if sHem == "W":
            dDD=dDD *-1

        self.spinBoxLonDD.setValue(dDD)


    def latDDtoDMS(self):
        dDD=self.spinBoxLatDD.value()


        iDeg=int(dDD)
        dMin=(dDD-iDeg)*60
        iMin=int(dMin)
        dSec=(dMin-iMin)*60

        self.spinBoxLatD.setValue(abs(iDeg))
        self.spinBoxLatM.setValue(abs(iMin))
        self.spinBoxLatS.setValue(abs(dSec))

        if dDD<0:
            self.latDir.setCurrentText("S")
        else:
            self.latDir.setCurrentText("N")


    def lngDDtoDMS(self):
        dDD=self.spinBoxLonDD.value()


        iDeg=int(dDD)
        dMin=(dDD-iDeg)*60
        iMin=int(dMin)
        dSec=(dMin-iMin)*60

        self.spinBoxLonD.setValue(abs(iDeg))
        self.spinBoxLonM.setValue(abs(iMin))
        self.spinBoxLonS.setValue(abs(dSec))

        if dDD<0:
            self.lonDir.setCurrentText("W")
        else:
            self.lonDir.setCurrentText("E")


